from flask import Flask, render_template, request, redirect, url_for, flash, send_file
import downloader
import requests
from validator import is_valid_cve_format, cve_exists
from fetch_exploit import fetch_exploit_db_links
import os

app = Flask(__name__)
app.secret_key = "your_secret_key"
NIST_API_KEY = 'bddcfab3-ff93-4502-a789-69dc0e9cd05a'

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        cve_id = request.form['cve_id']
        if cve_id:
            if not is_valid_cve_format(cve_id):
                flash("Invalid CVE ID format", "warning")
            else:
                status = cve_exists(cve_id)
                if status == True:
                    return redirect(url_for('result', cve_id=cve_id))
                else:
                    flash(f"CVE ID status: {status}", "warning")
        else:
            flash("Please enter a CVE ID", "warning")
    return render_template('index.html')

@app.route('/result/<cve_id>')
def result(cve_id):
    # API URL
    nist_api_url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?cveId={cve_id}"

    # Add the API key to the request headers
    headers = {
        'apiKey': NIST_API_KEY
    }

    # Fetch details from NIST API with headers
    nist_response = requests.get(nist_api_url, headers=headers).json()

    # Check if any results were found
    if nist_response.get("totalResults", 0) == 0:
        flash(f"No information found for CVE ID {cve_id}", "warning")
        return redirect(url_for('index'))

    # Extract the relevant information
    cve_data = nist_response['vulnerabilities'][0]['cve']
    description = cve_data['descriptions'][0]['value']
    score = cve_data['metrics']['cvssMetricV31'][0]['cvssData']['baseScore']
    cvss_severity = cve_data['metrics']['cvssMetricV31'][0]['cvssData']['baseSeverity']
    
    # Fetch and filter references (excluding broken ones)
    references = [
        ref['url'] for ref in cve_data['references']
        if 'Broken Link' not in ref.get('tags', [])
    ]

    # Fetch exploit links from Exploit-DB
    exploit_links = fetch_exploit_db_links(cve_id)

    # Render the result template with all the data
    return render_template('result.html', 
                           cve_id=cve_id, 
                           description=description, 
                           score=score, 
                           severity=cvss_severity, 
                           exploit_links=exploit_links,
                           references=references)

@app.route('/download_report/<cve_id>', methods=['POST'])
def download_report(cve_id):
    file_type = request.form['file_type']
    
    # Generate a summary report (dummy text for now)
    summary = f"Summary for {cve_id} - This is a placeholder summary."
    
    # Generate the report using the downloader module
    file_path = downloader.generate_report(cve_id, summary, file_type)
    
    # Send the file as a response to the client
    return send_file(file_path, as_attachment=True)

if __name__ == '__main__':
    app.run(debug=True)
